-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (z) -> [c, z]
  | Var (x) -> [c, s.lookup (x)]
  | Ref (x) -> [c, Ref (x)]
  | Binop (operator, l, r) -> 
    case evalList (c, {l, r}) of
      [c, {v1, v2}] -> [c, evalOp (operator, v1, v2)]
    esac
  | Skip -> [c, Ignore (Skip)]
  | Assn (l, r) -> 
    case evalList (c, {l, r}) of
        [[s, w], {Ref (x), v}] -> [[s <- [x, v], w], v]
      | [c, {ElemRef (arr, idx), v}] -> arr[idx] := v; [c, v]
    esac
  | Seq (s1, s2) -> 
    case evalList (c, {s1, s2}) of
      [c, {_, v}] -> [c, v]
    esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, _] -> [c, Ignore (Skip)]
      esac
  | While (e, s) -> 
    case eval (c, e) of
      [c, n] -> 
        if n then 
          case eval (c, s) of
            [c, v] -> eval (c, While (e, s))
          esac
        else 
          [c, Ignore (Skip)] 
        fi
    esac
  | If (e, s1, s2) -> 
    case eval (c, e) of
      [c, n] -> 
        if n then 
          eval (c, s1) 
        else 
          eval (c, s2)
        fi
    esac
  | DoWhile (s, e) -> 
    case eval (c, s) of 
      [c, _] -> eval (c, While (e, s))
    esac
  | Scope (defs, e) -> 
    fun addDefinition (state, def) {
      case def of
        Var (names) -> addNames (state, names)
      | Fun (name, args, body) -> addFunction (state, name, args, body)
      esac
    }
    var newS = foldl (addDefinition, enterScope (s), defs);
    case eval ([newS, w], e) of
      [[s, w], v] -> [[leaveScope (s), w], v]
    esac
  | Call (x, args) -> 
    case s.lookup (x) of
      Fun (funArgs, body) ->
        case evalList (c, args) of
          [[s, w], args] -> 
            case body of 
                External ->
                  case evalBuiltin (x, args, w) of
                    [v, w] -> [[s, w], v]
                  esac
              | _ -> 
                fun addArgs (s, args) {
                  case args of
                      [z : funArgsOther, v : valsOther] -> addArgs (addName (s, z, v), [funArgsOther, valsOther])
                    | _ -> s
                  esac
                }
                var newS = addArgs (enterFunction (s), [funArgs, args]);
                case eval ([newS, w], body) of
                  [[newS, w], v] -> [[leaveFunction (s, getGlobal (newS)), w], v]
                esac
            esac
        esac
    esac 
  | Set (x, e) -> eval (c, Assn (Ref (x), e))
  | String (x) -> [c, x] 
  | Elem (e, i) -> 
    case evalList (c, {e, i}) of
        [c, {Sexp (_, x), i}] -> [c, x[i]]
      | [c, {x, i}] -> [c, x[i]]
    esac 
  | ElemRef (e, i) ->
    case evalList (c, {e, i}) of
      [c, {Sexp (_, x), i}] -> [c, ElemRef (x, i)]
      | [c, {x, i}] -> [c, ElemRef (x, i)]
    esac 
  | Array (els) -> 
    case evalList (c, els) of
      [c, els] -> [c, listArray (els)]
    esac
  | Sexp (x, e) ->
    case evalList (c, e) of 
      [c, args] -> [c, Sexp (x, listArray (args))]
    esac
  | Builtin(f, args) ->
    case evalList (c, args) of
      [[s, w], args] ->
        case evalBuiltin (f, args, w) of
          [v, w] -> [[s, w], v]
        esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
