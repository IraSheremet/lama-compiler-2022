-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} 
                          | lident @ fun (x) {Var (x)}
                          | inbr (s ("("), exp, s (")"))),
      exp = memo $ eta (expr({[Left, {[s("&&"), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("!!"), fun (l, op, r) {Binop (op, l, r)}]}],
                              [Left, {[s(">"), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("<"), fun (l, op, r) {Binop (op, l, r)}],
                                      [s(">="), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("<="), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("=="), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("!="), fun (l, op, r) {Binop (op, l, r)}]}],
                              [Left, {[s("+"), fun (l, op, r) {Binop (op, l, r)}], 
                                      [s("-"), fun (l, op, r) {Binop (op, l, r)}]}],
                              [Left, {[s("/"), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("*"), fun (l, op, r) {Binop (op, l, r)}],
                                      [s("%"), fun (l, op, r) {Binop (op, l, r)}]}]}, 
                              primary));

var stmt = memo $ eta syntax (x=lident s[":="] e=exp {Assn (x, e)} 
                              | kSkip {Skip} 
                              | kRead x=inbr [s ("("), lident, s (")")] {Read (x)} 
                              | kWrite s["("] x=exp s[")"] {Write (x)} 
                              | kWhile e=exp kDo s=stmt_parser kOd {While (e, s)} 
                              | kIf e=exp kThen s1=stmt_parser s2=else_parser {If (e, s1, s2)} 
                              | kDo s=stmt_parser kWhile e=exp kOd {DoWhile (s, e)}
                              | kFor s1=stmt_parser s[","] e=exp s[","] s2=stmt_parser kDo s3=stmt_parser kOd {Seq(s1, While (e, Seq (s3, s2)))});

var stmt_parser = memo $ eta syntax (l=stmt s[";"] r=stmt_parser {Seq (l, r)} | stmt) ;
var else_parser = memo $ eta syntax (kFi {Skip} 
                                     | -kElse stmt_parser -kFi 
                                     | kElif e=exp kThen s1=stmt_parser s2=else_parser {If (e, s1, s2)});

-- Public top-level parser
public parse = stmt_parser;
